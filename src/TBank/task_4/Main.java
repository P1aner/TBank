package TBank.task_4;
/*
–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è ¬´T-Saurus¬ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –ò–Ω–∂–µ–Ω–µ—Ä—ã —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –µ—ë —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Ç. –µ. –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞. –ü—Ä–∏—á–µ–º, –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É.
–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç—ã, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç —Å–≤–æ—ë –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ç–∞–∫ —á–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –Ω–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ). –ü—Ä–∏ —ç—Ç–æ–º –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –æ—Ç 11 –¥–æ ùëõn. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –∫–∞–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –µ–º—É –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∑–∞ –∫–∞–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è –∑–∞ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è. –¢–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å –Ω–æ–º–µ—Ä–æ–º 11 –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–æ —á–∏—Å–ª–æ ùëõn (1‚â§ùëõ‚â§105)(1‚â§n‚â§105) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –î–∞–ª–µ–µ –¥–∞–Ω–æ ùëõn —Å—Ç—Ä–æ–∫. –í ùëñi-–π —Å—Ç—Ä–æ–∫–µ –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º –∏–¥—ë—Ç ùëéùëñai ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö ùëñi-–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞. –î–∞–ª–µ–µ –∏–¥–µ—Ç ùëéùëñai —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚Äî –∏—Ö –Ω–æ–º–µ—Ä–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.
–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–∏–º–µ—Ä 1
–í–≤–æ–¥:
5
3 2 3 5
1 4
0
0
1 3

–í—ã–≤–æ–¥: 3

–ü—Ä–∏–º–µ—Ä 2
–í–≤–æ–¥:
6
1 2
1 3
1 4
1 5
1 6
0

–í—ã–≤–æ–¥: 6

–ü—Ä–∏–º–µ—Ä 3
–í–≤–æ–¥:
6
5 2 3 4 5 6
0
0
0
0
0

–í—ã–≤–æ–¥: 2

–ü—Ä–∏–º–µ—Ä 4
–í–≤–æ–¥:
3
0
0
0

–í—ã–≤–æ–¥: 1
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            int threadsCount = Integer.parseInt(scanner.nextLine());
            int[][] matrix = new int[threadsCount][threadsCount];
            for (int i = 0; i < threadsCount; i++) {
                int[] threadsDependency = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();

                for (int j = 1; j < threadsDependency[0] + 1; j++) {
                    matrix[i][threadsDependency[j] - 1] = 1;
                }
            }
            int seconds = 0;
            boolean[] threadsCompleted = new boolean[threadsCount];
            HashMap<Integer, List<Integer>> objectObjectHashMap = new HashMap<>();
            while (hasNextThread(threadsCompleted)) {
                List<Integer> toChangeColumn = new ArrayList<>();
                for (int i = 0; i < threadsCount; i++) {
                    if (!threadsCompleted[i] && Arrays.stream(matrix[i]).sum() == 0) {
                        if (objectObjectHashMap.get(seconds) != null) {
                            objectObjectHashMap.get(seconds).add(i);
                        } else {
                            List<Integer> value = new ArrayList<>();
                            value.add(i);
                            objectObjectHashMap.put(seconds, value);
                        }
                        toChangeColumn.add(i);
                        threadsCompleted[i] = true;
                    }
                }
                for (Integer integer : toChangeColumn) {
                    for (int j = 0; j < threadsCount; j++) {
                        matrix[j][integer] = 0;
                    }
                }
                seconds++;
            }
            System.out.println(objectObjectHashMap.size());
        }
    }

    private static boolean hasNextThread(boolean[] threadsCompleted) {
        for (boolean b : threadsCompleted) {
            if (!b) return true;
        }
        return false;
    }
}
